/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package gui;

import auto.User;
import auto.UserController;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author gorz
 */
public class Users extends javax.swing.JFrame implements Action {

    private GuiController controller;
    private UserController userController;
    private UsersModel model;
    private HashMap<String, Object> map;
    
    /**
     * Creates new form Users
     */
    public Users(GuiController controler, UserController userController) {
        map = new HashMap<String, Object>();
        initComponents();
        model = new UsersModel();
        jTable1.setModel(model);
        ButtonColumn buttonColumn = new ButtonColumn(jTable1, this, 2);
        jTable1.getColumnModel().getColumn(2).setMaxWidth(10);
        this.controller = controler;
        this.userController = userController;
        back.addKeyListener(GuiController.listener);
        addUser.addKeyListener(GuiController.listener);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JTable table = (JTable) e.getSource();
        int modelRow = Integer.valueOf(e.getActionCommand());
        User user = model.getUser(modelRow);
        int result = userController.deleteUser(user);
        if(result == 2) {
            JOptionPane.showMessageDialog(this, "Сбой БД!");
        } else if(result == 1) {
            JOptionPane.showMessageDialog(this, "Нельзя удалить главного эксперта");
        } else {
            model.deleteUser(modelRow);
            jTable1.revalidate();
            jTable1.repaint();
        }
    }

    @Override
    public void putValue(String key, Object value) {
        map.put(key, value);
    }

    @Override
    public Object getValue(String key) {
        return map.get(key);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        addUser = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        back = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Управление пользователями");

        jLabel2.setText("Эксперты:");

        addUser.setText("Добавить эксперта");
        addUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        back.setText("Назад");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addUser))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(139, 139, 139)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back)
                    .addComponent(addUser))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        model.clear();
        ArrayList<User> users = userController.getAllUsers();
        model.setUsers(users);
        jTable1.revalidate();
        jTable1.repaint();
        //this.pack();
        this.setLocationRelativeTo(null);
    }//GEN-LAST:event_formComponentShown

    private void addUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUserActionPerformed
        String login = JOptionPane.showInputDialog(this, "Логин:");
        if(login == null) {
            return;
        }
        if(login.length() == 0) {
            JOptionPane.showMessageDialog(this, "Заполните поле логин!");
            return;
        } else if(login.length() > 30) {
            JOptionPane.showMessageDialog(this, "Длина логина не должна привышать 30 символов");
            return;
        } else {
            int result = userController.addUser(login);
            if(result == 2) {
                JOptionPane.showMessageDialog(this, "Сбой БД!");
                return;
            } else if(result == 1) {
                JOptionPane.showMessageDialog(this, "Эксперт с таким логином уже существует");
                return;
            } else {
                formComponentShown(null);
            }
        }
    }//GEN-LAST:event_addUserActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        controller.changeFrame("menu");
    }//GEN-LAST:event_backActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addUser;
    private javax.swing.JButton back;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

class UsersModel extends AbstractTableModel {

    ArrayList<User> users = new ArrayList<User>();
    Icon icon;
    
    public UsersModel() {
        icon = new ImageIcon("del.png");
    }

    public void addUser(User user) {
        users.add(user);
    }
    
    public void setUsers(ArrayList<User> users) {
        this.users = users;
    }
    
    public User getUser(int i) {
        return users.get(i);
    }
    
    public void deleteUser(int i) {
        users.remove(i);
    } 
    
    public void clear() {
        users.clear();
    }
    
    @Override
    public String getColumnName(int column) {
       switch(column) {
           case 0:
               return "Логин";
           case 1:
               return "ФИО";
       }
       return "";
    }
    
    
    @Override
    public Class<?> getColumnClass(int col) {
        switch(col) {
            case 0:
            case 1:
                return String.class;
            default:
                return ButtonColumn.class;
        }
    }

    @Override
    public boolean isCellEditable(int row, int col) {
        return col == 2;
    }
    
    @Override
    public int getRowCount() {
        return users.size();
    }

    @Override
    public int getColumnCount() {
        return 3;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        User user = users.get(rowIndex);
        switch(columnIndex) {
            case 0:
                return user.getLogin();
            case 1:
                return user.getFio();
            default:
                return icon;
        }
    }
    
}