/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import auto.InputDataController;
import static java.awt.Component.LEFT_ALIGNMENT;
import java.awt.FlowLayout;
import java.util.ArrayList;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author gorz
 */
public class Repair extends javax.swing.JFrame implements Clearable{

    private GuiController controller;
    private InputDataController inputDataController;
    private boolean needUpdate = true;
    private ComponentModel materialsModel;
    private ComponentModel componentsModel;
    /**
     * Creates new form Repair
     */
    public Repair(GuiController controller, InputDataController inputDataController) {
        initComponents();
        this.controller = controller;
        this.inputDataController = inputDataController;
        materialsModel = new ComponentModel(materials);
        componentsModel = new ComponentModel(components);
        materials.setModel(materialsModel);
        components.setModel(componentsModel);
        materials.getColumnModel().getColumn(0).setMaxWidth(10);
        components.getColumnModel().getColumn(0).setMaxWidth(10);
        ArrayList<String> m = inputDataController.getMaterials();
        for(int i=0; i<m.size(); i++) {
            materialsModel.add(i, m.get(i));
        }
        materials.revalidate();
        materials.repaint();
        back.addKeyListener(GuiController.listener);
        next.addKeyListener(GuiController.listener);
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        repair = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        materials = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        components = new javax.swing.JTable();
        back = new javax.swing.JButton();
        next = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        liquidity = new javax.swing.JTextField();
        renewable = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Ремонт");

        jLabel2.setText("Трудоемкость ремонта в нормо-часах:");

        repair.setText("0");

        jLabel3.setText("Материалы необходимые для ремонта:");

        materials.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(materials);

        jLabel4.setText("Комплектующие, которые нуобходимо заменить:");

        components.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(components);

        back.setText("Назад");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        next.setText("Продолжить");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        jLabel5.setText("Коэффцикиент ликвидности:");

        renewable.setText("Обновление ТС невозможно");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(162, 162, 162)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(liquidity, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(renewable))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(repair))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(back)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(next)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(repair, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(liquidity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(renewable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(next)
                    .addComponent(back))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        controller.changeFrame("components");
    }//GEN-LAST:event_backActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        ArrayList<Integer> seletedComponents = new ArrayList<Integer>();
        ArrayList<Component> m = componentsModel.get();
        try {
            for(Component c : m) {
                if(c.selected) {
                    Integer i = new Integer(c.value);
                    if(i<0) {
                        throw new NumberFormatException();
                    }
                    seletedComponents.add(i);
                } else {
                    seletedComponents.add(null);
                }
            }
        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Количество компонент должно быть положительным целым числом");
            return;
        }
        ArrayList<Float> seletedMaterials = new ArrayList<Float>();
        m = materialsModel.get();
        try {
            for(Component c : m) {
                if(c.selected) {
                    Float f = new Float(c.value);
                    if(f<0) {
                        throw new NumberFormatException();
                    }
                    seletedMaterials.add(f);
                } else {
                    seletedMaterials.add(null);
                }
            }
        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Количество материалов должно быть положительным числом");
            return;
        }
        float repairVal;
        try {
           repairVal = Float.valueOf(repair.getText()); 
           if(repairVal < 0) {
               throw new NumberFormatException();
           }
        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Трудоемкость ремонта должна быть положительным числом");
            return;
        }
        float liquidityVal;
        try {
           liquidityVal = Float.valueOf(liquidity.getText()); 
           if(liquidityVal < 0.8 || liquidityVal > 0.95) {
                JOptionPane.showMessageDialog(this, "коэффициент ликвидности должен находится в пределах от 0.8 до 0.95!");
                return;
           }
        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "коэффициент ликвидности должен быть положительным числом");
            return;
        }
        inputDataController.setRepairComponents(
                repairVal,
                seletedMaterials,
                seletedComponents);
        inputDataController.setLiquidityFactor(
                Float.valueOf(liquidity.getText()), 
                !renewable.isSelected());
        try {
            JOptionPane.showMessageDialog(
                    this, 
                    "C = "+inputDataController.getCost()+"\n"+
                    "Cл = "+inputDataController.getLiquidityPrice()+"\n"+
                    "У = "+inputDataController.getDamage()
            );
        } catch(Exception e) {
            JOptionPane.showMessageDialog(
                    this, 
                    "Ошибка: "+e.getMessage()
            );
        }
    }//GEN-LAST:event_nextActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        if(needUpdate) {
            ArrayList<String> c = inputDataController.getComponents();
            for(int i=0; i<c.size(); i++) {
                componentsModel.add(i, c.get(i));
            }    
            components.revalidate();
            components.repaint();
            needUpdate = false;
        }
    }//GEN-LAST:event_formComponentShown

    @Override
    public void clear() {
        componentsModel.clear();
        components.revalidate();
        components.repaint();
        repair.setText("0");
        liquidity.setText("0.8");
        renewable.setSelected(false);
        needUpdate = true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JTable components;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField liquidity;
    private javax.swing.JTable materials;
    private javax.swing.JButton next;
    private javax.swing.JCheckBox renewable;
    private javax.swing.JTextField repair;
    // End of variables declaration//GEN-END:variables
}

class Component {
    
    public int index;
    public boolean selected;
    public String value;
    public String name;
    
    public Component(int index, String name) {
        this.index = index;
        this.value = "0";
        this.selected = false;
        this.name = name;
    }
}

class ComponentModel extends AbstractTableModel {

    ArrayList<Component> components;
    JTable table;
    
    public ComponentModel(JTable table) {
        this.table = table;
        components = new ArrayList<Component>();
    }
    
    public void add(int i, String name) {
        components.add(new Component(i, name));
    }
    
    public void clear() {
        components.clear();
    }
    
    public ArrayList<Component> get() {
        return components;
    }
    
    @Override
    public String getColumnName(int column) {
       switch(column) {
           case 1:
               return "Количество";
           case 2:
               return "Наименование";
       }
       return "";
    }
    
    
    @Override
    public Class<?> getColumnClass(int col) {
        switch(col) {
            case 1:
            case 2:
                return String.class;
            default:
                return Boolean.class;
        }
    }

    @Override
    public boolean isCellEditable(int row, int col) {
        return !(col == 2);
    }
    
    @Override
    public int getRowCount() {
        return components.size();
    }

    @Override
    public int getColumnCount() {
        return 3;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Component component = components.get(rowIndex);
        switch(columnIndex) {
            case 0:
                return component.selected;
            case 1:
                return component.value;
            case 2:
                return component.name;
        }
        return "";
    }

    @Override
    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
        if(columnIndex == 0) {
            components.get(rowIndex).selected = (Boolean)aValue;
            table.revalidate();
            table.repaint();
        } else if(columnIndex == 1) {
            components.get(rowIndex).value = (String)aValue;
            if(!((String)aValue).trim().equals("0")) {
                components.get(rowIndex).selected = true;
            }
            table.revalidate();
            table.repaint();
        } else {
            super.setValueAt(aValue, rowIndex, columnIndex); 
        }
    }
      
}