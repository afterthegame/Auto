/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import auto.InputDataController;
import auto.Pair;
import auto.User;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.Action;
import javax.swing.BoxLayout;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author gorz
 */
public class Components extends javax.swing.JFrame implements Clearable, Action {

    private GuiController controller;
    private InputDataController inputDataController;
    private ArrayList<String> componentsNames = null;
    private ArrayList<String> equipmentsNames = null;
    private boolean needUpdate = true;
    private EntityModel componentsModel;
    private EntityModel equipmentsModel;
    private HashMap<String, Object> map;
    /**
     * Creates new form Components
     */
    public Components(GuiController controller, InputDataController inputDataController) {
        map = new HashMap<String, Object>();
        initComponents();
        componentsModel = new EntityModel(components);
        components.setModel(componentsModel);
        ButtonColumn buttonColumn = new ButtonColumn(components, this, 2);
        components.getColumnModel().getColumn(2).setMaxWidth(10);
        equipmentsModel = new EntityModel(components);
        equipments.setModel(equipmentsModel);
        buttonColumn = new ButtonColumn(equipments, this, 2);
        equipments.getColumnModel().getColumn(2).setMaxWidth(10);
        this.controller = controller;
        this.inputDataController = inputDataController;
        this.setLocationRelativeTo(null);
        back.addKeyListener(GuiController.listener);
        next.addKeyListener(GuiController.listener);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        JTable table = (JTable) e.getSource();
        int modelRow = Integer.valueOf(e.getActionCommand());
        if(table == components) {
            componentsModel.delete(modelRow);
        } else {
            equipmentsModel.delete(modelRow);
        }
        table.revalidate();
        table.repaint();
    }

    @Override
    public void putValue(String key, Object value) {
        map.put(key, value);
    }

    @Override
    public Object getValue(String key) {
        return map.get(key);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        listOfComponents = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        components = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        listOfEquipments = new javax.swing.JComboBox();
        addEquipment = new javax.swing.JButton();
        addComponent = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        equipments = new javax.swing.JTable();
        back = new javax.swing.JButton();
        next = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setText("Компоненты и оборудование");

        components.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(components);

        jLabel2.setText("Компоненты:");

        jLabel3.setText("Оборудование:");

        addEquipment.setText("Добавить");
        addEquipment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEquipmentActionPerformed(evt);
            }
        });

        addComponent.setText("Добавить");
        addComponent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addComponentActionPerformed(evt);
            }
        });

        equipments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(equipments);

        back.setText("Назад");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        next.setText("Продолжить");
        next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(95, 95, 95))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(listOfComponents, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(addComponent))
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(listOfEquipments, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(addEquipment))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(next)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(12, 12, 12)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listOfComponents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addComponent))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listOfEquipments, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addEquipment))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back)
                    .addComponent(next))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void clear() {
        needUpdate = true;
        listOfComponents.removeAllItems();
        listOfEquipments.removeAllItems();
        componentsModel.clear();
        components.revalidate();
        components.repaint();
        equipmentsModel.clear();
        equipments.revalidate();
        equipments.repaint();
    }
    
    private void addComponentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addComponentActionPerformed
        int index = listOfComponents.getSelectedIndex();
        componentsModel.add(index, componentsNames.get(index));
        components.revalidate();
    }//GEN-LAST:event_addComponentActionPerformed

    private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
        ArrayList<Pair<Integer, Integer>> selectedEquipments = new ArrayList<Pair<Integer, Integer>>();
        ArrayList<Entity> entities = equipmentsModel.get();
        try {
            for(Entity e : entities) {
                Pair<Integer, Integer> pair = new Pair<Integer, Integer>(e.index, Integer.valueOf(e.month));
                if(pair.second <= 0) {
                    throw new NumberFormatException();
                }
                selectedEquipments.add(pair);
            }
        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Срок эксплуатации должен быть положительным числом");
            return;
        }
        ArrayList<Pair<Integer, Integer>> selectedComponents = new ArrayList<Pair<Integer, Integer>>();
        entities = componentsModel.get();
        try {
            for(Entity e : entities) {
                Pair<Integer, Integer> pair = new Pair<Integer, Integer>(e.index, Integer.valueOf(e.month));
                if(pair.second <= 0) {
                    throw new NumberFormatException();
                }
                selectedComponents.add(pair);
            }
        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Срок эксплуатации должен быть положительным числом");
            return;
        }
        inputDataController.setComponentsAndEquipments(
                selectedComponents, 
                selectedEquipments);
        controller.changeFrame("repair");
    }//GEN-LAST:event_nextActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        controller.changeFrame("usageConditions");
    }//GEN-LAST:event_backActionPerformed

    private void addEquipmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEquipmentActionPerformed
        int index = listOfEquipments.getSelectedIndex();
        equipmentsModel.add(index, equipmentsNames.get(index));
        equipments.revalidate();
    }//GEN-LAST:event_addEquipmentActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        if(needUpdate) {
            componentsNames = inputDataController.getComponents();
            for(String name : componentsNames) {
                listOfComponents.addItem(name);
            }
            equipmentsNames = inputDataController.getEquipments();
            for(String name : equipmentsNames) {
                listOfEquipments.addItem(name);
            }   
            needUpdate = false;
        }
    }//GEN-LAST:event_formComponentShown

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addComponent;
    private javax.swing.JButton addEquipment;
    private javax.swing.JButton back;
    private javax.swing.JTable components;
    private javax.swing.JTable equipments;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox listOfComponents;
    private javax.swing.JComboBox listOfEquipments;
    private javax.swing.JButton next;
    // End of variables declaration//GEN-END:variables
}

class Entity {
    
    public int index;
    public String month;
    public String name;
    
    public Entity(int index, String month, String name) {
        this.index = index;
        this.month = month;
        this.name = name;
    }
}

class EntityModel extends AbstractTableModel {

    ArrayList<Entity> entities;
    Icon icon;
    JTable table;
    
    public EntityModel(JTable table) {
        this.table = table;
        entities = new ArrayList<Entity>();
        icon = new ImageIcon("del.png");
    }
    
    public void add(int i, String name) {
        entities.add(new Entity(i, "1", name));
    }
    
    public void delete(int i) {
        entities.remove(i);
    }
    
    public void clear() {
        entities.clear();
    }
    
    public ArrayList<Entity> get() {
        return entities;
    }
    
    @Override
    public String getColumnName(int column) {
       switch(column) {
           case 0:
               return "Срок эксплуатации (мес.)";
           case 1:
               return "Наименование";
       }
       return "";
    }
    
    
    @Override
    public Class<?> getColumnClass(int col) {
        switch(col) {
            case 0:
            case 1:
                return String.class;
            default:
                return ButtonColumn.class;
        }
    }

    @Override
    public boolean isCellEditable(int row, int col) {
        return !(col == 1);
    }
    
    @Override
    public int getRowCount() {
        return entities.size();
    }

    @Override
    public int getColumnCount() {
        return 3;
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        Entity entity = entities.get(rowIndex);
        switch(columnIndex) {
            case 0:
                return entity.month;
            case 1:
                return entity.name;
            default:
                return icon;
        }
    }

    @Override
    public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
        if(columnIndex == 0) {
            entities.get(rowIndex).month = (String)aValue;
            table.revalidate();
            table.repaint();
        } else {
            super.setValueAt(aValue, rowIndex, columnIndex); 
        }
    }
    
    
    
}